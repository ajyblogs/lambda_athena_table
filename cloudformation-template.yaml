AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SAM template for Glue Table Creator with Custom Resource Trigger'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource tagging
  
  DataBucket:
    Type: String
    Description: S3 bucket containing the data for Glue tables
  
  DatabaseName:
    Type: String
    Description: Glue database name
    
  CodeBucket:
    Type: String
    Description: S3 bucket containing the Lambda code package

  TableCreatorCodeKey:
    Type: String
    Default: glue-table-creator.zip
    Description: S3 key for the Glue table creator Lambda code package

Resources:
  # Main Glue Table Creator Lambda
  GlueTableCreatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      CodeUri: 
        Bucket: !Ref CodeBucket
        Key: !Ref TableCreatorCodeKey
      Runtime: python3.9
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DATABASE_NAME: !Ref DatabaseName
          DATA_BUCKET: !Ref DataBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - glue:CreateTable
                - glue:GetTable
                - glue:GetDatabase
                - glue:GetDatabases
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetBucketLocation
                - s3:ListBucket
              Resource:
                - !Sub arn:aws:s3:::${DataBucket}
                - !Sub arn:aws:s3:::${DataBucket}/*
                - !Sub arn:aws:s3:::${CodeBucket}
                - !Sub arn:aws:s3:::${CodeBucket}/${TableCreatorCodeKey}
      Tags:
        Environment: !Ref Environment

  # Custom Resource Trigger Lambda
  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      InlineCode: |
          import json
          import boto3
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          lambda_client = boto3.client('lambda')

          def lambda_handler(event, context):
              try:
                  logger.info(f"Received event: {json.dumps(event)}")
                  
                  if event['RequestType'] in ['Create', 'Update']:
                      # Invoke the Glue table creator Lambda
                      response = lambda_client.invoke(
                          FunctionName=event['ResourceProperties']['TableCreatorFunction'],
                          InvocationType='RequestResponse',
                          Payload=json.dumps({})
                      )
                      
                      # Parse the response
                      payload = json.loads(response['Payload'].read().decode())
                      logger.info(f"Table creator response: {payload}")
                      
                      # Check if the table creation was successful
                      if payload.get('statusCode') == 200:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                              {'Message': 'Tables created successfully'})
                      else:
                          error_msg = payload.get('body', {}).get('error', 'Unknown error')
                          cfnresponse.send(event, context, cfnresponse.FAILED, 
                              {'Error': f"Table creation failed: {error_msg}"})
                  
                  elif event['RequestType'] == 'Delete':
                      # Just return success for delete events
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                          {'Message': 'Delete request processed'})
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, 
                      {'Error': str(e)})
      Runtime: python3.9
      Timeout: 300
      MemorySize: 128
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt GlueTableCreatorFunction.Arn
      Tags:
        Environment: !Ref Environment

  # Custom Resource that triggers the table creation
  TableCreationTrigger:
    Type: Custom::TableCreationTrigger
    Properties:
      ServiceToken: !GetAtt TriggerFunction.Arn
      TableCreatorFunction: !GetAtt GlueTableCreatorFunction.Arn
      UpdateToken: !Sub '${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'
    DependsOn:
      - GlueTableCreatorFunction

Outputs:
  GlueTableCreatorFunctionArn:
    Description: ARN of the Glue table creator Lambda function
    Value: !GetAtt GlueTableCreatorFunction.Arn

  TriggerFunctionArn:
    Description: ARN of the trigger Lambda function
    Value: !GetAtt TriggerFunction.Arn
